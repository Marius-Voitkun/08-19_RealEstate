@model _08_19_RealEstate.ViewModels.ApartmentFormViewModel
@{
    ViewData["Title"] = "Edit Apartment";
}

<h2>Edit apartment</h2>

@using (Html.BeginForm("Edit", "Apartments", FormMethod.Post))
{
    <div class="form-row">
        <div class="form-group col-sm-6 col-md-4">
            @Html.LabelFor(m => m.Apartment.Address.City)
            @Html.TextBoxFor(m => m.Apartment.Address.City, new { @class = "form-control" })
        </div>
        <div class="form-group col-sm-6 col-md-4">
            @Html.LabelFor(m => m.Apartment.Address.Street)
            @Html.TextBoxFor(m => m.Apartment.Address.Street, new { @class = "form-control" })
        </div>
        <div class="form-group col-6 col-md-2">
            @Html.LabelFor(m => m.Apartment.Address.HouseNr, "House Nr.")
            @Html.TextBoxFor(m => m.Apartment.Address.HouseNr, new { @class = "form-control" })
        </div>
        <div class="form-group col-6 col-md-2">
            @Html.LabelFor(m => m.Apartment.Address.FlatNr, "Flat Nr.")
            @Html.TextBoxFor(m => m.Apartment.Address.FlatNr, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-4">
            @Html.LabelFor(m => m.Apartment.Floor)
            @Html.TextBoxFor(m => m.Apartment.Floor, new { @class = "form-control" })
        </div>
        <div class="form-group col-4">
            @Html.LabelFor(m => m.Apartment.TotalFloorsInBuilding, "Total floors in the building")
            @Html.TextBoxFor(m => m.Apartment.TotalFloorsInBuilding, new { @class = "form-control" })
        </div>
        <div class="form-group col-4">
            @Html.LabelFor(m => m.Apartment.AreaInSqm, "Area in m²")
            @Html.TextBoxFor(m => m.Apartment.AreaInSqm, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-6">
            @Html.LabelFor(m => m.Apartment.CompanyId, "Select company")
            @Html.DropDownListFor(m => m.Apartment.CompanyId, new SelectList(Model.Companies, "Id", "Name"), "<Select Company>", new { @class = "form-control", id = "companies" })
        </div>
        <div class="form-group col-md-6">
            @Html.LabelFor(m => m.Apartment.BrokerId, "Select broker")
            @Html.DropDownListFor(m => m.Apartment.BrokerId, new SelectList(new List<string>()), "<...>", new { @class = "form-control", id = "brokers" })
        </div>
    </div>

    @Html.HiddenFor(m => m.Apartment.Id)
    @Html.HiddenFor(m => m.Apartment.Address.Id)

    <button type="submit" class="btn btn-primary">Save changes</button>
    @Html.ActionLink("Cancel", "Index", "Apartments", null, new { @class = "btn btn-secondary" })
}

@section scripts{
    <script>
        $(document).ready(function () {
            let companyId = $("#companies").val();
            let brokerId = @Model.Apartment.BrokerId;
            $("#brokers").empty();
            $("#brokers").append("<option value=''>&lt;Select Broker&gt;</option>");
            $.each(getBrokersForCompany(companyId), function (i, broker) {
                $("#brokers").append(`<option value="${broker.Id}">${broker.FirstName} ${broker.LastName}</option>`);
            });
            $(`#brokers option[value=${brokerId}]`).attr('selected', 'selected');
        });

        $(function () {
            $("#companies").on("change", function () {
                let companyId = $(this).val();
                $("#brokers").empty();
                $("#brokers").append("<option value=''>&lt;Select Broker&gt;</option>");
                $.each(getBrokersForCompany(companyId), function (i, broker) {
                    $("#brokers").append(`<option value="${broker.Id}">${broker.FirstName} ${broker.LastName}</option>`);
                });
            });
        });


        function getBrokersForCompany(id) {
            let companiesBrokersJson = @Html.Raw(Json.Serialize(@Model.CompaniesBrokersJson));
            let brokersJson = @Html.Raw(Json.Serialize(@Model.BrokersJson));

            let companiesBrokers = JSON.parse(companiesBrokersJson);
            let brokers = JSON.parse(brokersJson);

            let brokersIdsForCompany = companiesBrokers.filter(x => x.CompanyId == id).map(x => x.BrokerId);

            return brokers.filter(b => brokersIdsForCompany.includes(b.Id));
        }
    </script>
}